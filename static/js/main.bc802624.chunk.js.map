{"version":3,"sources":["components/Button.js","components/Header.js","components/Value.js","components/EditConfig.js","components/Config.js","components/Configs.js","components/AddConfig.js","App.js","reportWebVitals.js","index.js"],"names":["Button","color","text","onClick","style","backgroundColor","className","defaultProps","Header","onAdd","showForm","showform","Value","value","code","name","fr","en","EditConfig","onEdit","config","onEditClick","useState","id","setName","values","map","setCode","english","setEnglish","french","setFrench","onSubmit","e","preventDefault","type","placeholder","onChange","target","Config","onDelete","showEdit","setShowEdit","float","Configs","configs","AddConfig","alert","App","setShowForm","setConfigs","newConfig","Math","floor","random","length","filter","updatedConfig","valuesCodesCsvArray","toString","split","englishCsvArray","frenchCsvArray","i","push","ConfigUpdated","updatedConfigs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc802624.chunk.js","sourcesContent":["  \r\nconst Button = ({ color, text, onClick }) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      style={{ backgroundColor: color }}\r\n      className='btn'\r\n    >\r\n      {text}\r\n    </button>\r\n  )\r\n}\r\n\r\nButton.defaultProps = {\r\n  color: 'steelblue',\r\n}\r\n\r\n\r\n\r\nexport default Button","import Button from './Button'\r\n\r\nconst Header = ({onAdd, showForm}) => {\r\n \r\n    return (\r\n        <div className=\"header\">\r\n           <h1>Config Mapper</h1> \r\n          <Button color='blue' text= {showForm ? 'Add Config' :'Hide Form'} onClick={onAdd} showform={showForm}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react'\r\n\r\nconst Value = ({value}) => {\r\n    return (\r\n        <div>\r\n            <p className=\"values\">Value Code : {value.code} <br></br> French Value: {value.name.fr}<br></br> English Value : {value.name.en}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Value\r\n","import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst EditConfig = ({onEdit, config, onEditClick}) => {\r\n  const [id, setId] = useState(config.id)\r\n  const [name, setName] = useState(config.name)\r\n  const [code, setCode] = useState(config.values.map((value)=>(value.code)))\r\n  const [english, setEnglish] = useState(config.values.map((value)=>(value.name.en)))\r\n  const [french, setFrench] = useState(config.values.map((value)=>(value.name.fr)))\r\n\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    onEditClick()\r\n    onEdit({ id, name, code, french, english})\r\n  }\r\n\r\n  return (\r\n    <form className='add-form' onSubmit={onSubmit}>\r\n      <div className='form-control'>\r\n        <label>Config Name</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Add Config'\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>Value Codes</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Update value codes'\r\n          value={code}\r\n          onChange={(e) => setCode(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>French Values List</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Update French values'\r\n          value={french}\r\n          onChange={(e) => setFrench(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>English Values List</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Update English values'\r\n          value={english}\r\n          onChange={(e) => setEnglish(e.target.value)}\r\n        />\r\n      </div>\r\n      <input type='submit' value='Update Config' className='btn btn-block' />\r\n    </form>\r\n  )\r\n}\r\n\r\n\r\nexport default EditConfig\r\n","import Value from './Value'\r\nimport EditConfig from './EditConfig'\r\nimport { FaPencilAlt, FaTimes} from 'react-icons/fa'\r\nimport { useState } from 'react'\r\n\r\nconst Config = ({config, onDelete, onEdit}) => {\r\n    const [showEdit, setShowEdit] = useState(false)\r\n\r\n    const onEditClick = () => {\r\n       setShowEdit(!showEdit)\r\n    }\r\n\r\n    return (\r\n        <div className=\"config\"> \r\n           <h3 >{config.name} <FaTimes onClick ={()=> onDelete(config.id)}/></h3> \r\n           <div >\r\n           {config.values.map((value)=> (<Value  value = {value}/>))}\r\n           </div>\r\n          <h3 style ={{float:\"right\"}}><FaPencilAlt onClick ={()=> onEditClick(config)}/></h3> \r\n            {showEdit ? <EditConfig onEditClick = {onEditClick} onEdit = {onEdit} config = {config}/>: ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Config\r\n","\r\nimport Config from './Config'\r\n\r\n\r\nconst Configs = ({configs, onDelete, onEdit}) => {\r\n    \r\n    return (\r\n        <div>\r\n            {configs.map((config) => (\r\n                <Config key ={config.id} config = {config} onDelete={onDelete} onEdit={onEdit}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Configs\r\n","import { useState } from 'react'\r\n\r\nconst AddConfig = ({ onAdd, showForm }) => {\r\n  const [name, setName] = useState('')\r\n  const [code, setCode] = useState('')\r\n  const [english, setEnglish] = useState('')\r\n  const [french, setFrench] = useState('')\r\n\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (!name) {\r\n      alert('Please add a Config Name')\r\n      return\r\n    }\r\n\r\n    onAdd({ name, code, french, english})\r\n\r\n    setName('')\r\n    setCode('')\r\n   \r\n  }\r\n\r\n  return (\r\n    <form className='add-form' onSubmit={onSubmit}>\r\n      <div className='form-control'>\r\n        <label>Config Name</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Add Config'\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>Value Codes</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Add value codes'\r\n          value={code}\r\n          onChange={(e) => setCode(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>French Values List</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Add the French values list'\r\n          value={french}\r\n          onChange={(e) => setFrench(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className='form-control'>\r\n        <label>English Values List</label>\r\n        <input\r\n          type='text'\r\n          placeholder='Add the English values list'\r\n          value={english}\r\n          onChange={(e) => setEnglish(e.target.value)}\r\n        />\r\n      </div>\r\n      <input type='submit' value='Save Config' className='btn btn-block' />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default AddConfig","import Header from './components/Header'\nimport Configs from './components/Configs'\nimport AddConfig from './components/AddConfig'\nimport { useState } from 'react'\n\nfunction App() {\n  const [showForm, setShowForm] = useState(true)\n  const [configs, setConfigs] = useState([\n    {\n        id:1,\n        name:'Icecat Colors',\n        values :[\n           {\n              code:'blue',\n              name:{\n                 fr:'bleue',\n                 en:'blue'\n              }\n           },\n           {\n              code:'red',\n              name:{\n                 fr:'rouge',\n                 en:'red'\n              }\n           }\n        ]\n     },\n     {\n        id:2,\n        name:'Lego Colors',\n        values:[\n           {\n              code:'0',\n              name:{\n                 fr:'bleue'\n              }\n           },\n           {\n              code:'1',\n              name:{\n                 fr:'rouge'\n              }\n           }\n        ]\n     }\n]\n   \n)\nconst deleteConfig = (id) => {\n  setConfigs(configs.filter((config)=> config.id !==id))\n}\nconst addConfig = (config) => {\n  setShowForm(!showForm)\n  const id = Math.floor(Math.random()*10000 +1)\n\n  const newConfig =  {\n    \"id\":id,\n    \"name\":config.name, \n    \"values\":[{\n      \"code\":config.code,\n      \"name\":\n      {\n        \n        \"en\": config.english,\n        \"fr\": config.french\n      }\n    }]\n\n  }\n setConfigs([...configs, newConfig])\n}\n\nconst editConfig = (updatedConfig) => {\n\n  //converting to string and splititng at comma\nconst codesAsString = updatedConfig.code.toString()\nconst valuesCodesCsvArray = codesAsString.split(',')\n\nconst englishValuesAsString = updatedConfig.english.toString()\nconst englishCsvArray = englishValuesAsString.split(',')\n\nconst frenchValuesAsString = updatedConfig.french.toString()\nconst frenchCsvArray  =frenchValuesAsString.split(',')\n\n//check if they're the same length, if not send alert\nif((valuesCodesCsvArray.length !== englishCsvArray.length) && (valuesCodesCsvArray.length!== frenchCsvArray.length))\n{\n  alert('Please ensure you have enough values to map')\n  return\n}\n\n\n//building the values within a mapping with the new information\nlet values = []\nfor ( let i = 0; i < valuesCodesCsvArray.length; i++) {\nvalues.push(\n  {\n    \"code\":valuesCodesCsvArray[i],\n    \"name\":\n    {\n      \n      \"en\": englishCsvArray[i],\n      \"fr\": frenchCsvArray[i]\n    }\n  }\n)\n}\n\n//building the total config with the updated names and values\n  const ConfigUpdated =  {\n    \"id\":updatedConfig.id,\n    \"name\":updatedConfig.name, \n    \"values\":values\n  }\n\n//mapping through state to find the config to be updated\nconst updatedConfigs = [...configs].map((config) => {\n  if(config.id === updatedConfig.id){\n    config = ConfigUpdated\n  }\n  return config\n})\n\n//updating state \nsetConfigs(updatedConfigs)\n }\n\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={()=> setShowForm(!showForm)} showForm= {showForm}/>\n     {!showForm && <AddConfig onAdd = {addConfig}/>}\n      {configs.length >0 ? (<Configs configs = {configs} onDelete = {deleteConfig} onEdit={editConfig}/>) : ('No configurations to show') }\n     \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}